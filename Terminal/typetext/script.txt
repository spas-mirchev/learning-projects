what if some lines of text in the widget are very long longer than the width of the widget by default the text wraps around to the next line this behavior can be changed with the wrap configuration option  it defaults to char meaning wrap lines at any character other options are word to wrap lines only at word breaks and none meaning to not wrap lines at all in the latter case some text of longer lines won't be visible unless we attach a horizontal scrollbar to the widget users can also scroll through the text using arrow keys even if scrollbars aren't present.
when we specified a position of first line first character this was an example of an index it tells the insert method where to put the new text just before the first line first character at the very start of the widget indices can be specified in a variety of ways we used another one with the get method end means just past the end of the text why just past text is inserted right before the given index so inserting at end will add text to the end of the widget note that tk will always add a newline at the very end of the text widget.
while the insert method adds new text anywhere in the widget the delete start end method removes it we can delete either a single character specified by index or a range of characters specified by start and end indices in the latter case characters from the start index until just before the end index are deleted the character at the end index is not deleted so if we assume for each of these we start off with abcd\nefgh in the text widget.
tags are objects associated with the text widget each tag is referred to via a name chosen by the programmer each tag has several configuration options these are things like fonts and colors that control formatting though tags are objects having state they don't need to be explicitly created but are automatically created the first time the tag name is used.
in canvas widgets only individual canvas items have configuration options that control their appearance when we refer to a tag in a canvas the meaning of that is identical to all canvas items presently having that tag the tag itself doesn't exist as a separate object so in the following snippet the last rectangle added will not be colored red we can identify the range of text selected by a user for example an editor may have a toolbar button to bold the selected text. While you can tell when the selection has changed to update whether or not the bold button is active via the selection virtual event that doesn't tell you what has been selected.
thetext widget automatically maintains a tag named sel which refers to the selected text whenever the selection changes the sel tag will be updated so we can find the range of text selected using the tag ranges tag method passing it sel as the tag to report on.
similarly we can change the selection by using tag add to set a new selection or tag remove to remove the selection the sel tag cannot be deleted however both canvas and text widgets support tags that can be applied to several objects style them however canvas and text tags are not the same and there are substantial differences to take note of.
marks indicate a particular place in the text in that respect they are like indices however as the text is modified the mark will adjust to be in the same relative location in that way they resemble tags but refer to a single position rather than a range of text. Marks actually don't refer to a position occupied by a character in the text but specify a position between two characters
automatically maintains two different marks the first named insert is the present location of the insertion cursor as the cursor is moved via mouse or keyboard the mark moves with it the second mark named current tracks the position of the character underneath the current mouse position.
create your own marks use the widget's mark set name idx method passing it the name of the mark and an index the mark is positioned just before the character at the given index this is also used to move an existing mark to a different position marks can be removed using the mark unset name method passing it the name of the mark. 
like canvas widgets text widgets can contain images and any other tk widgets including frames containing many other widgets in a sense this allows the text widget to work as a geometry manager in its own right the ability to add images and widgets within the text opens up a world of possibilities for your program images are added to a text widget at a particular index with the image specified as an existing tk image other options that allow you to fine-tune padding.
text widgets can do many more things here we'll briefly mention just a few more of them for details on any of these see the reference manual the text widget includes a powerful search method to locate a piece of text within the widget this is useful for a find dialog as one obvious example you can search backward or forward from a particular position or within a given range, specify the search term using exact text, case insensitive or via regular expressions find one or all occurrences of the search term.